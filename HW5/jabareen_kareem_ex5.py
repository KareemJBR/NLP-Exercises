from sys import argv
import numpy as np
import math


def get_tree(SPC, my_words, my_list_dict, first, last):
    """"""
    tree_res = ''
    my_value = my_list_dict[str(first) + ',' + str(last)]
    if len(my_value) == 1:
        for i in range(SPC):
            tree_res += " "
        tree_res += my_value[0] + " > " + my_words[first] + '\n'
    else:
        for i in range(SPC):
            tree_res += " "
        tree_res += my_value[0] + '\n'
        tree_res += get_tree(SPC + 6, my_words, my_list_dict, first, my_value[2])
        tree_res += get_tree(SPC + 6, my_words, my_list_dict, my_value[2], last)

    return tree_res


def run_CKY(sentence, my_grammar):
    """"""

    cky_res = ""
    non_terminals = {}
    j = 0

    for grammar in my_grammar:
        my_gram = grammar.split()

        for i in range(len(my_gram)):
            if my_gram[i].isalpha():
                if my_gram[i].isupper():
                    if my_gram[i] not in non_terminals:
                        non_terminals[my_gram[i]] = j
                        j += 1

    my_list_dict = {}
    my_words = sentence.split()
    v = len(non_terminals)
    n = len(my_words)
    my_table = np.zeros((n, n + 1, v))

    for j in range(1, n + 1):
        for grammar in my_grammar:
            my_gram = grammar.split()
            if my_gram[3] == my_words[j - 1]:
                my_table[j - 1, j, non_terminals[my_gram[1]]] = my_gram[0]
                indices = [j - 1, j]
                left_non_term = [my_gram[1]]
                my_list_dict[str(indices[0]) + ',' + str(indices[1])] = left_non_term

        for i in range(j - 2, -1, -1):
            for k in range(i + 1, j):
                first_right_nonterm = []
                second_right_nonterm = []
                for non_term in non_terminals:
                    if my_table[i, k, non_terminals[non_term]] > 0:
                        first_right_nonterm.append(non_term)
                    if my_table[k, j, non_terminals[non_term]] > 0:
                        second_right_nonterm.append(non_term)

                for first_nonterm in first_right_nonterm:
                    for second_nonterm in second_right_nonterm:
                        for grammar in my_grammar:
                            my_gram = grammar.split()
                            v = len(my_gram)
                            my_right = my_gram[v - 2] + ' ' + my_gram[v - 1]
                            current_right = first_nonterm + " " + second_nonterm
                            if current_right == my_right:
                                my_prob = float(my_gram[0]) * my_table[i, k, non_terminals[first_nonterm]] * my_table[
                                    k, j, non_terminals[second_nonterm]]
                                if my_prob > my_table[i, j, non_terminals[my_gram[1]]]:
                                    indices = [i, j]
                                    subtree_data = [my_gram[1], first_nonterm, k, second_nonterm]

                                    my_list_dict[
                                        str(indices[0]) + ',' + str(indices[1])] = subtree_data

                                    my_table[i, j, non_terminals[my_gram[1]]] = my_prob

    cky_res += "Sentence: " + sentence
    if my_table[0, n, non_terminals["S"]] == 0:
        cky_res += " *** This sentence is not a member of the language generated by the grammar *** \n\n"

    else:
        cky_res += "Parsing:\n"
        cky_res += get_tree(0, my_words, my_list_dict, 0, n)
        cky_res += "Log Probability: " + str(math.log(my_table[0, n, non_terminals["S"]])) + '\n\n'

    return cky_res


if __name__ == '__main__':

    input_grammar = argv[1]         # The name of the file that contains the probabilistic grammar
    input_sentences = argv[2]       # The name of the file that contains the input sentences (tests)
    output_trees = argv[3]          # The name of the output file

    output_text = ""

    with open(input_grammar, 'r') as jabber:
        grammar_rules = jabber.readlines()

    with open(input_sentences, 'r') as jabber:
        sentences = jabber.readlines()

    for sen in sentences:
        output_text += run_CKY(sen, grammar_rules)

    with open(output_trees, 'w', encoding='utf-8') as jabber:
        jabber.write(output_text)
